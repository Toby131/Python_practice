########################예외처리 사용하기
'''
예외처리 (Exception Handling) : 프로그램이 실행되는 도중 발생할 수 있는 에러를 처리
-> 비정상적으로 종료될 수 있는 프로그램을 정상적으로 종료될 수 있도록 실행 흐름 만드는 것.
'''
def ten_div(x):
    return 10/x
# 위에서 정의한 ten_div()함수 호출하기 : 매개변수 x에 전달할 값은 입력받기
input_x=int(input("정수 입력:"))
result=ten_div(input_x)
print("10을 사용자가 입력한 정수로 나눈 몫", result)

print("------------------------------------------------------------------------")
'''
리스트 또는 튜플 사용하는 경우에 없는 인덱스 사용하는 경우
'''
#리스트
a=["홍길동", "김길동", "나길동", "다길동", "라길동"]
print(a[0])
print(a[4])
#print(a[5]) #없는 인덱스 사용해 예외 발생


print("------------------------------------------------------------------------")
#튜플
b=('가나다','라마바','사아자')
print(b[0])
print(b[len(b)-1])
#print(b[len(b)])


print("------------------------------------------------------------------------")
'''
덧셈 계산할 때 데이터의 형이 일치하지 않는 경우
'''
c=10+20
print(c)
c='10'+'20'
print(c)
#c=10+'20'
#print(c)


print("------------------------------------------------------------------------")
'''
try except 사용하기 - 예외처리
'''
try:
    x=int(input('정수입력:'))
    y=10/x
    print(y)
except:
    print("예외 발생")


print("------------------------------------------------------------------------")
'''
특정 예외만 처리하기
'''
#실행흐름
#1. 10/0 계산 -> 예외발생 -> except ZeroDivisionError로 이동해 10/0안됩니다 명령어 실행->무조건 명령어 실행
#2. print(10/0)주석 후 -> indexError 발생-> except Exception 이동해 다른종류 명령어 실행 -> 무조건 명령어 실행
a=[1,2,3,4,5]
try:
    print(10/0)
    print(a[len(a)])
except ZeroDivisionError:
    print("10/0은 안됩니다.")
except Exception:
    print("다른 종류의 예외발생")

print("무조건 실행 명령어")


print("------------------------------------------------------------------------")
'''
try 블럭 안에 작성한 명령어 실행할 때 발생할 수 있는 Zero예외와 Index예외, 그 외 예외 처리
'''
try:
    print(a[len(a)])
except ZeroDivisionError:
    print("0으로 나누기 할 수 없음")
except IndexError:
    print("인덱스 오류")
except Exception:
    print("다른 예외 발생")
print("디버깅이 종료되었습니다.")


print("------------------------------------------------------------------------")
'''
시스템으로부터 예외의 에러메시지 받아오기
'''
try:
    print(10/0)
except ZeroDivisionError as a:
    print("에러메시지 :",a)
except Exception as b:
    print("에러메시지:",b)


print("------------------------------------------------------------------------")
'''
else와 finally사용하기
'''
try:
    x=int(input("나눌 숫자:"))
    y=10/x
except ZeroDivisionError:
    print("0으로 나눌수 없음")
else:
    print("10/x는?",y)


print("------------------------------------------------------------------------")
'''
예외와는 상관없이 항상 코드 실행
'''
try:
    x=int(input("나눌 숫자:"))
    y=10/x
except ZeroDivisionError:
    print("10/0은 실행할 수 없음")
else:
    print("10/x=",y)
finally:
    print("코드 실행 종료")


print("------------------------------------------------------------------------")
'''
예외 발생시키기
'''
try:
    x=int(input("정수 입력하기 :"))
    if x % 3 != 0 :
        raise Exception("3의 배수가 아님")
    print("사용자가 입력한 정수는 3의 배수, 값=",x)
except Exception as e:
    print("에러 메시지는",e)
    
print("------------------------------------------------------------------------") 
'''
현재 예외 다시 발생시키기
'''
def fnc1():
    try:
        x=int(input("정수를 입력하세요:"))
        if x % 3 != 0:
            raise Exception("3의 배수 아님.")
        print("3의 배수")
    except Exception as e:
        print("fnc1()함수 속 에러 메시지:",e)
        #아래 raise 명령어 실행 -> 함수 전체 종료 -> return 명령어와 기능 유사
        raise

#위에서 정의한 fnc1()함수를 호출하는 형식은 raise함수 처리할 수 있도록 try 블록과 except 블록이 존재해야함
try:
    fnc1()
except Exception as e:
     print("fnc1()함수에 예외 발생")
     
print("------------------------------------------------------------------------")
'''
예외 만들기 : 상속을 사용해 현재 사용하고 있는 클래스 재사용(새로운 이름ㅇㄹ 갖는 예외 클래스 정의하기)
'''
#Exception 클래스 상속 받는 MyException 클래스 정의
class MyException(Exception):
    #초기화 함수 정의
    def __init__(self):         
        super().__init__('3의 배수가 아님')

#함수 정의
def fnc1():
    try:
        x=int(input('정수 입력:'))
        if x % 3 != 0:
            raise MyException
        print("사용자가 입력한 3의 배수인 정수=",x)

    except Exception as e:
        print("에러메시지=",e)

#위에서 정의한 fnc1()함수 호출
fnc1()
