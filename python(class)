'''
날짜 클래스 만들기
'''
class Date:
    @staticmethod
    def is_date_vaild(date_string):
        year, month, day = map(int, date_string.split('-'))
        condition1=1<=month<=12
        condition2=1<=day<=31
        return condition1 and condition2

if Date.is_date_vaild('2000-1-30')==True:
    print("올바른 날짜 형식")
else :
    print("잘못된 날짜 형식")

if Date.is_date_vaild('2000-31-30')==False:
    print("잘못된 날짜 형식")
else :
    print("올바른 날짜 형식")


print()
'''
클래스 상속 사용하기
'''
class Person:
    def __init__(self, no='000000-0000000'):     #__init__초기화 함수 정의하고 주민번호 보관할 수 있는 속성 선언과 초기화
        print("Person 클래스에서 정의한 __init__() 메소드가 호출됨")
        self. jumin_no=no
        print("주민번호=", self.jumin_no)

# 실무에서는 속성(변수) 하나당 2개의 메서드는 의무적으로 만듦(왜? 많이 사용하니까)
# 첫 번째 함수는 속성이 갖고 있는 값을 읽는 함수 -> 이름은 'get'으로 시작하는 접두사를 주로 붙임 ex) get_속성이름
    def get_jumin_no(self):
        print("get_junin_no()함수 호출")
        return self.jumin_no

# 두 번째 함수는 속성의 현재 값을 다른 값으로 바꾸는 함수 -> 이름은 'set'으로 시작하는 접두사를 주로 붙임 ex) set_속성이름
    def set_jumin_no(self,new_no):
        print("set_jumin_no()함수 호출")
        self.jumin_no=new_no

# 위에서 정의한 Person클래스를 상속받는 Student클래스 정의
class Student(Person):
    def __init__(self,no='000000-0000000', major='컴공'):      #초기화 함수 정의(왜? 상속에서 제외되기 때문에 무조건 정의해야함)
        print("Student 클래스에서 정의한 초기화 함수 호출")
        super().__init__()      # Person 클래스에서 정의한 속성들을 메모리에 만들기 위해서는 초기화 함수 호출해야함
        self.jumin_no=no    # super : 속성과 메서드를 상속하게 해준 클래스의 시작 주소를 갖고있는 내부 함수 명
                                      # 상속하게 되면 메모리에 클래스 계층도가 그려짐 : Person 클래스 아래에는 Student 클래스의 트리구조(부모-자식관계)
        self.major=major
        
    def method1(self):      # 상속받은 get_jumin_no()메서드를 사용하는 method1 메서드 정의
        print("Person클래스로부터 상속받은 get_jumin_no 메서드 호출")
        print(self.get_jumin_no())
        print("Person클래스로부터상속받은 self_jumin_no() [새 주민번호] 메서드 호출")
        self.set_jumin_no(self.get_jumin_no()+'1')
        print(self.get_jumin_no())

# 위에서 정의한 Person 클래스 사용해서 객체 선언하기
kim=Person()        
print(kim.get_jumin_no())
lee=Person('111111-1111111')
print(lee.get_jumin_no())
# Student 클래스 사용해 객체 선언하기
choi=Student()
print(choi.get_jumin_no())
# Student 클래스에서 새로 정의한 method1 메서드 호출
choi.method1()
# Person 클래스에서 상속해준 set_jumin_no()메서드 호출
input_jumin_no=input("새로운 주민번호 입력:")
choi.get_jumin_no=input_jumin_no
print(choi.get_jumin_no)'''
class Person:
    def __init__(self, no='000000-0000000'):     #__init__초기화 함수 정의하고 주민번호 보관할 수 있는 속성 선언과 초기화
        print("Person 클래스에서 정의한 __init__() 메소드가 호출됨")
        self. jumin_no=no
        print("주민번호=", self.jumin_no)

# 실무에서는 속성(변수) 하나당 2개의 메서드는 의무적으로 만듦(왜? 많이 사용하니까)
# 첫 번째 함수는 속성이 갖고 있는 값을 읽는 함수 -> 이름은 'get'으로 시작하는 접두사를 주로 붙임 ex) get_속성이름
    def get_jumin_no(self):
        print("get_junin_no()함수 호출")
        return self.jumin_no

# 두 번째 함수는 속성의 현재 값을 다른 값으로 바꾸는 함수 -> 이름은 'set'으로 시작하는 접두사를 주로 붙임 ex) set_속성이름
    def set_jumin_no(self,new_no):
        print("set_jumin_no()함수 호출")
        self.jumin_no=new_no

# 위에서 정의한 Person클래스를 상속받는 Student클래스 정의
class Student(Person):
    def __init__(self,no='000000-0000000', major='컴공'):      #초기화 함수 정의(왜? 상속에서 제외되기 때문에 무조건 정의해야함)
        print("Student 클래스에서 정의한 초기화 함수 호출")
        super().__init__()      # Person 클래스에서 정의한 속성들을 메모리에 만들기 위해서는 초기화 함수 호출해야함
        self.jumin_no=no    # super : 속성과 메서드를 상속하게 해준 클래스의 시작 주소를 갖고있는 내부 함수 명
                                      # 상속하게 되면 메모리에 클래스 계층도가 그려짐 : Person 클래스 아래에는 Student 클래스의 트리구조(부모-자식관계)
        self.major=major
        
    def method1(self):      # 상속받은 get_jumin_no()메서드를 사용하는 method1 메서드 정의
        print("Person클래스로부터 상속받은 get_jumin_no 메서드 호출")
        print(self.get_jumin_no())
        print("Person클래스로부터상속받은 self_jumin_no() [새 주민번호] 메서드 호출")
        self.set_jumin_no(self.get_jumin_no()+'1')
        print(self.get_jumin_no())

# 위에서 정의한 Person 클래스 사용해서 객체 선언하기
kim=Person()        
print(kim.get_jumin_no())
lee=Person('111111-1111111')
print(lee.get_jumin_no())
# Student 클래스 사용해 객체 선언하기
choi=Student()
print(choi.get_jumin_no())
# Student 클래스에서 새로 정의한 method1 메서드 호출
choi.method1()
# Person 클래스에서 상속해준 set_jumin_no()메서드 호출
input_jumin_no=input("새로운 주민번호 입력:")
choi.get_jumin_no=input_jumin_no
print(choi.get_jumin_no)
